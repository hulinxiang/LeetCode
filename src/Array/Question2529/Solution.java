package Array.Question2529;

public class Solution {
    /**
     * @param nums 非递减的数组
     * @return 该数组中正整数和负整数的最大值
     */
    public int maximumCount(int[] nums) {
        int less = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                less++;
            }
            if (nums[i] == 0) {
                count++;
            }
            if (nums[i] > 0) {
                break;
            }
        }
        return Math.max(less, nums.length - count - less);
    }


    public static void main(String[] args) {
        int[] nums = new int[]{-1999, -1992, -1984, -1982, -1964, -1958, -1957, -1955, -1947, -1947, -1940, -1940, -1931, -1921, -1914, -1904, -1897, -1892, -1891, -1884, -1879, -1875, -1862, -1857, -1841, -1838, -1829, -1817, -1814, -1799, -1799, -1796, -1792, -1781, -1765, -1752, -1722, -1709, -1705, -1699, -1697, -1695, -1679, -1673, -1663, -1659, -1657, -1657, -1648, -1646, -1643, -1642, -1638, -1633, -1632, -1625, -1622, -1606, -1606, -1606, -1605, -1593, -1583, -1575, -1570, -1552, -1548, -1548, -1537, -1511, -1508, -1507, -1486, -1474, -1469, -1465, -1453, -1450, -1439, -1438, -1436, -1428, -1410, -1393, -1383, -1362, -1343, -1326, -1326, -1318, -1317, -1313, -1292, -1290, -1290, -1279, -1276, -1260, -1252, -1239, -1201, -1198, -1193, -1187, -1178, -1169, -1166, -1163, -1162, -1160, -1154, -1149, -1138, -1129, -1100, -1086, -1074, -1065, -1059, -1049, -1042, -1039, -1034, -1028, -1024, -1002, -998, -995, -985, -984, -974, -970, -963, -958, -946, -921, -915, -914, -914, -910, -905, -895, -893, -872, -856, -845, -834, -833, -828, -810, -808, -794, -782, -776, -766, -765, -764, -763, -736, -727, -710, -708, -689, -682, -681, -674, -666, -654, -630, -630, -595, -593, -587, -582, -577, -577, -554, -548, -542, -527, -519, -488, -474, -466, -457, -456, -449, -447, -437, -434, -419, -416, -403, -381, -380, -379, -378, -376, -366, -349, -347, -332, -315, -294, -286, -283, -282, -280, -261, -260, -252, -246, -245, -240, -231, -224, -213, -211, -202, -190, -185, -182, -171, -165, -158, -144, -128, -127, -117, -108, -97, -89, -88, -87, -76, -71, -70, -68, -66, -57, -49, -31, -30, -26, -25, -25, -23, -17, -16, -1, 0, 24, 31, 33, 34, 39, 55, 63, 72, 83, 83, 97, 100, 120, 123, 133, 133, 136, 155, 157, 157, 158, 160, 160, 161, 161, 175, 187, 188, 189, 209, 213, 221, 225, 273, 282, 302, 304, 305, 312, 314, 316, 331, 334, 352, 362, 373, 376, 389, 391, 406, 409, 439, 455, 461, 468, 468, 479, 482, 482, 496, 500, 505, 515, 521, 530, 543, 548, 551, 552, 555, 576, 577, 581, 584, 588, 589, 593, 597, 623, 639, 643, 644, 645, 651, 652, 656, 696, 700, 712, 715, 716, 730, 742, 749, 774, 796, 801, 804, 809, 813, 817, 828, 835, 839, 845, 848, 848, 863, 877, 878, 880, 880, 887, 888, 898, 917, 924, 930, 931, 940, 950, 960, 988, 995, 1080, 1085, 1091, 1105, 1108, 1109, 1114, 1116, 1124, 1126, 1129, 1148, 1152, 1171, 1175, 1197, 1208, 1218, 1222, 1227, 1228, 1233, 1235, 1249, 1249, 1254, 1262, 1273, 1274, 1283, 1284, 1288, 1289, 1292, 1293, 1294, 1321, 1325, 1328, 1345, 1351, 1356, 1375, 1378, 1386, 1388, 1400, 1401, 1407, 1410, 1411, 1411, 1416, 1420, 1441, 1450, 1452, 1458, 1486, 1500, 1507, 1509, 1511, 1517, 1523, 1538, 1560, 1579, 1583, 1589, 1598, 1605, 1608, 1608, 1615, 1622, 1624, 1631, 1633, 1679, 1684, 1687, 1691, 1697, 1709, 1716, 1722, 1742, 1743, 1745, 1747, 1747, 1754, 1754, 1765, 1766, 1772, 1783, 1784, 1807, 1829, 1854, 1873, 1883, 1885, 1885, 1887, 1909, 1926, 1929, 1929, 1930, 1933, 1938, 1949, 1951, 1956, 1958, 1961, 1969, 1972, 1987, 1987, 1994, 1994};
        Solution solution = new Solution();
        System.out.println(solution.maximumCount(nums));

    }
}
